问题1：分布式系统中如何保证事务的一致性？ 列出解决方案及技术选型
解决：
     一：分布式事务场景
        1.多个应用程序间相互协作操作
        2.一个应用程序中调用不同数据库。 （大部分场景是这个案例）

     二：分布式事务理论
        C（consistency） 一致性：数据保持同一时刻数据一致。
        A(avaliability)  可用性：当集群一部分节点故障后， 集群整体是否还能响应客户端请求
        P(partition tolerance)分区容忍性： 允许系统通过网络协同工作， 分区容忍性要解决由于网络分区导致数据的不完整及无法访问等问题
        补充内容
            基于微服务进行讨论， 系统之间的调用是通过网络进行的，有几率会失败， 所以我们需要保证P
            剩下 C A， C A在多数情况下是互斥的
            如果保证 C，那么在系统进行写操作时 其他系统不能进行读写操作，则会牺牲A，
            不锁定其他系统，则无法保证C
            如果保证 G2 的可用性，那么势必不能锁定 G2，所以一致性不成立。
     三：解决方案
        前提：不存在同时满足CAP的分布式处理方案， 只能满足其中两项进行技术选型
        根据情景进行业务解决
        情景1，同一个应用内的多数据源事务
        可选方案 ：基于XA的强一致进行事务管理
        技术选型：Atomikos
        //不主要讨论，暂时不写demo
        情景2,不同应间的分布式事务
        可选方案1：
        TCC分布式事务（CP）
        思路，给业务添加一个“就绪的状态”
        可选方案2：
        基于消息队列处理分布式事务（AP）
        利用消息队列进行分布式事务管理 最终一致性方案
        问题点：生产者消息投递可靠性。
        使用 amqp事务或者 使用 消息comfirm机制
        (1)amqp实现： 关闭消息确认机制
        注册 rabbitTreansactionManager
        使用@Transaction注解进行消息事务管理
        性能较差
        (2)基于消息确认机制： 开启消息确认机制
        重写 confirmCallBack接口 自定义处理方式

        问题点，消费方确认消费，
        消费放使用手动ACK的方式确认队列正确消费
        加入全局ID ，防止重复消费

        做一个demo使用队列进行分布式事务处理













